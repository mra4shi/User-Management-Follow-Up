import React, { useEffect, useState } from "react";
import { Link, useFetcher, useNavigate } from "react-router-dom";
import { adminRequest } from "../../axios";
import Register from "./Register";
import axios from "axios";

function UsersList() {
  const [notificationcount, setNotificationcount] = useState(null);
  const [users, setFollowup] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [selectedListOption, setSelectedListOption] = useState("");
  const [searchTerm, setSearchterm] = useState("");
  const [searchResult, setSearchresult] = useState([]);

  const handleListOptionChange = (event) => {
    const value = event.target.value;
    setSelectedListOption(value);
  };

  const handleSearch = async () => {
    const response = await axios.post("/api/admin/search", { searchTerm });
    setSearchresult(response.data);
    console.log(response.data);
  };

  const indexOfLastUser = currentPage * itemsPerPage;
  const indexOfFirstUser = indexOfLastUser - itemsPerPage;

  const filteredUsers = selectedListOption
    ? users.slice(0, parseInt(selectedListOption, 10))
    : searchResult.length > 0
    ? searchResult.slice(indexOfFirstUser, indexOfLastUser)
    : users.slice(indexOfFirstUser, indexOfLastUser);

  const paginate = (pageNumber) => setCurrentPage(pageNumber);

  useEffect(() => {
    adminRequest({
      url: "/api/admin/getuserwithfollowup",
      method: "GET",
    }).then((response) => {
      setFollowup(response.data);
    });
  }, []);

  useEffect(() => {
    adminRequest({
      url: "/api/admin/notification",
      method: "GET",
    }).then((response) => {
      setNotificationcount(response.data.notification.length);
    });
  }, []);

  const navigate = useNavigate();
  const handleLogout = (e) => {
    e.preventDefault();
    localStorage.removeItem("admin_Secret");
    navigate("/admin/login");
  };

  return (
    <div>
      {/* (Your navigation bar code) */}
      <input
        type="text"
        value={searchTerm}
        onChange={(e) => setSearchterm(e.target.value)}
      />
      <button onClick={handleSearch}>Search</button>
      <div className="container">
        <nav className="float-right navbar navbar-light bg-light ">
          <label
            htmlFor="countries_multiple"
            className="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-400"
          >
            Select List option
          </label>
          <select
            onChange={handleListOptionChange}
            id="countries"
            className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
          >
            <option value="">Choose List</option>
            <option value="10">10</option>
            <option value="20">20</option>
            <option value="30">30</option>
            <option value="40">40</option>
          </select>
        </nav>
      </div>
      <div className="container">
        <div className="row">
          {filteredUsers?.map((item) => (
            <ul className="list-group list-group-light" key={item.id}>
              <li
                className="list-group-item d-flex justify-content-between align-items-center"
                style={{ backgroundColor: "#FFE4C4" }}
              >
                <div className="d-flex align-items-center">
                  <div className="ms-3">
                    <p className="fw-bold mb-1">{item.name}</p>
                    <p className="text-muted mb-0">{item.email}</p>
                  </div>
                </div>
                <Link to={`/admin/user/${item.id}`} role="button">
                  <button className="btn text-white bg-danger btn-rounded btn-sm">
                    View
                  </button>
                </Link>
              </li>
            </ul>
          ))}

          <nav className="float-right navbar navbar-light mt-5 bg-light">
            <ul className="pagination">
              {Array.from({
                length: Math.ceil(filteredUsers.length / itemsPerPage),
              }).map((_, index) => (
                <li key={index} className="page-item">
                  <button
                    onClick={() => paginate(index + 1)}
                    className="page-link"
                  >
                    {index + 1}
                  </button>
                </li>
              ))}
            </ul>
          </nav>
        </div>
      </div>
    </div>
  );
}

export default UsersList;